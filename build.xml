<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="all" name="Validation and Diagnostics">
  
  <description>
#####################################################################
#  Project build file by Martin Holmes (mholmes@uvic.ca), 2016-11.  #
    
    This build file does three basic tasks:
    
      1. Validates all the files of various types it can find, 
         against appropriate schemas.
    
      2. Runs diagnostics for today, and adds the resulting file to 
         the git repo if it is not yet in there.
    
      3. Runs meta-diagnostics across all the previously-created 
         diagnostics files.
    
    It requires libraries that are in code/utilities, so it should 
    be run with:
    
      ant -lib code/utilities 
    
    It also requires ant-contrib.
#                                                                   #
#####################################################################
  </description>

  <property name="echo.separator" value="************************************************"/>
  
<!-- We'll need access to the date. -->
  <tstamp>
    <format property="today" pattern="yyyy-MM-dd" locale="en,CA"/>
  </tstamp>
  
  
<!-- RelaxNG file which also includes Schematron annotations. -->
  <property name="rngFile" value="data/schemas/tccd.rng"/>
  
<!-- XSD file we will create. -->
  <property name="xsdFile" value="data/schemas/tccd.xsd"/>
  
<!-- Temporary Schematron file (not in repo).  -->
  <property name="schFile" value="data/schemas/tccd.sch"/>
  
<!-- Trang used for conversion of schema. -->
  <property name="trangJar" value="code/utilities/trang.jar"/>
  
<!-- Python script used to compile lists of various file types in text files. -->
  <property name="pythonListScript" value="code/utilities/listActiveDirectories.py"/>
  
<!-- Listings file created by Python script, used for validating TEI files. -->
  <property name="teiFileList" value="code/utilities/teiFiles.txt"/>
  
<!-- Diagnostics XSL file. -->
  <property name="diagnosticsXsl" value="code/xslt/diagnostics.xsl"/>
  
<!-- Diagnostics output file for today. -->
  <property name="diagnosticsOutput" value="code/diagnostics/diagnostics_${today}.html"/>
  
<!--  Some paths, libs and tasks. (May not all be needed.) -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  
<!-- We end up calling Jing with a dedicated Java task because we need to 
     pass a jvmarg to increase the default stack size, so this is not really
     needed. -->
<!--  <classloader classpath="code/utilities/jing.jar"></classloader>
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask" >
    <classpath path="code/utilities/jing.jar"></classpath>
  </taskdef>-->
  
<!-- SaxonHE is in the repo. -->
  <classloader classpath="code/utilities/saxonhe.jar"></classloader>
  
<!-- We need this for Schematron validation. -->
  <taskdef name="schematron" classname="com.schematron.ant.SchematronTask"
    classpath="code/utilities/ant-schematron-2010-04-14.jar"/>
  
<!-- Filesets for key files. -->
<!-- All XML files in the data directory should be TEI files. -->
  <fileset id="teiFiles" dir="data" includes="**/*.xml"/>
  

  <target name="MESSAGE">
    <echo>&#x0a;${echo.separator}</echo>
    <echo>   ${msg}   </echo>
    <echo>${echo.separator}&#x0a;</echo>
  </target>
  
  <target name="all">
    <antcall target="MESSAGE"><param name="msg" value="Running all the tasks in the build file."/></antcall>
    <antcall target="listFiles"/>
    <antcall target="validation"/>
    <antcall target="diagnostics"/>
    <antcall target="metadiagnostics"/>
    <antcall target="MESSAGE"><param name="msg" value="DONE!"/></antcall>
  </target>
  
  <target name="listFiles">
    <antcall target="MESSAGE"><param name="msg" value="Analysing paths to list key files."/></antcall>
    <exec executable="python3" failonerror="true">
      <arg value="${pythonListScript}"/>
    </exec>
  </target>
  
  <target name="createXsd">
    <antcall target="MESSAGE"><param name="msg" value="Creating XSD file for validation..."/></antcall>
    <!--  Create an XSD so someone could use SaxonEE or Xerces for validation.  -->
    <java jar="${trangJar}" fork="true">
      <arg value="${rngFile}"/>
      <arg value="${xsdFile}"/>
    </java>
  </target>
  
  <target name="validateWithJing">
    <basename property="fname" file="${filepath}"/>
    <echo message="Checking ${fname}..."/>
    <java jar="code/utilities/jing.jar" fork="true">
      <arg value="${rngFile}"/>
      <arg value="${filepath}"/>
<!-- Huge thanks to George Bina for suggesting this jvmarg,
     which prevents unpredictable stack overflow errors. -->
      <jvmarg value="-Xss2m"/>
    </java>
  </target>
  
  <target name="validation">
    
    <antcall target="MESSAGE"><param name="msg" value="Validating XML files with RelaxNG..."/></antcall>

<!--  We use a dedicated task for this because we need to pass 
      a larger stack value to handle the TEI schema. -->
    <loadfile property="allTeiFiles" srcFile="${teiFileList}"/>
    <foreach
      target="validateWithJing"
      list="${allTeiFiles}"
      delimiter="${line.separator}"
      param="filepath"/>
    
<!--  This fails because the iteration through folders takes huge amounts of time.
      Using a dedicated task on each file instead. -->
    <!--<jing compactsyntax="false" rngfile="${rngFile}" failonerror="true">
      <fileset refid="teiFiles"/>
    </jing>-->
    
    <antcall target="MESSAGE"><param name="msg" value="Extracting Schematron to do separate validation..."/></antcall>
    <xslt in="${rngFile}" out="${schFile}"
      style="code/utilities/schematron/ExtractSchFromRNG-2.xsl">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
    </xslt>
    
    <antcall target="MESSAGE"><param name="msg" value="Validating files with extracted Schematron..."/></antcall>
    <schematron schema="${schFile}" failOnError="true" format="message"
      queryLanguageBinding="xslt2">
      <fileset refid="teiFiles"/>
    </schematron>
  </target> 

  <target name="diagnostics">
    <antcall target="MESSAGE"><param name="msg" value="Running diagnostics..."/></antcall>
    <!--<echo message="${today}"/>-->
    <xslt force="yes" style="${diagnosticsXsl}" in="${diagnosticsXsl}" out="${diagnosticsOutput}">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
    </xslt>
    
<!--  We do a git add in case this file is not yet tracked by git. -->
<!--    git pull first, just in case. -->
    <exec executable="git">
      <arg value="pull"/>
    </exec>
    <exec executable="git">
      <arg value="add"/>
      <arg value="${diagnosticsOutput}"/>
    </exec>
<!--  Then commit, then push. -->
    <exec executable="git">
      <arg value="commit"/>
      <arg value="${diagnosticsOutput}"/>
      <arg value="-m &quot;Adding diagnostics generated ${today}.&quot;"/>
    </exec>
    <exec executable="git">
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="master"/>
    </exec>
  </target> 
  
  <target name="metadiagnostics">
    <antcall target="MESSAGE"><param name="msg" value="Running meta-diagnostics..."/></antcall>
  </target>
  

</project>
