<?xml version="1.0" encoding="utf-8"?>
<project basedir="." default="all" name="Validation, Diagnostics and build">
  
  <description>
#####################################################################
# Project build file by Martin Holmes (mholmes@uvic.ca), 2016-2017. #
    
    This build file does three basic tasks:
    
      1. Validates all the files of various types it can find, 
         against appropriate schemas.
    
      2. Runs diagnostics for today, and adds the resulting file to 
         the git repo if it is not yet in there.
    
      3. Runs meta-diagnostics across all the previously-created 
         diagnostics files.
         
      4. Builds the HTML website.
    
    It requires java libraries that are in code/utilities.
    
    It also requires ant-contrib.
    
    Run with:
    
    ant -lib code/utilities
    
    We need to provide the path on the command line because 
    the Schematron ant task cannot find it any other way. :-(
    
    Note that since there are potentially thousands of calls to the
    target validateWithJing, it is recommended to avoid excessive 
    output by running like this:
    
    ant -logger org.apache.tools.ant.listener.SimpleBigProjectLogger 
#                                                                   #
#####################################################################
  </description>

  <!--Add Saxon and Schematron jars to the classpath-->
  <classloader>
    <classpath>
      <fileset dir="${basedir}/code/utilities" includes="*.jar"/>
    </classpath>
  </classloader>

  <property name="echo.separator" value="************************************************"/>
  
<!-- We'll need access to the date. -->
  <tstamp>
    <format property="today" pattern="yyyy-MM-dd" locale="en,CA"/>
  </tstamp>
  
  
<!-- RelaxNG file which also includes Schematron annotations. -->
  <property name="rngFile" value="data/schemas/tccd.rng"/>
  
<!-- XSD file we will create. -->
  <property name="xsdFile" value="data/schemas/tccd.xsd"/>
  
<!-- Temporary Schematron file (not in repo).  -->
  <property name="schFile" value="data/schemas/tccd.sch"/>
  
<!-- Trang used for conversion of schema. -->
  <property name="trangJar" value="code/utilities/trang.jar"/>
  
<!-- Python script used to compile lists of various file types in text files. -->
  <property name="pythonListScript" value="code/utilities/listActiveDirectories.py"/>
  
<!-- Listings file created by Python script, used for validating TEI files. -->
  <property name="teiFileList" value="code/utilities/teiFiles.txt"/>
  
<!-- Diagnostics XSL file. -->
  <property name="diagnosticsXsl" value="code/xslt/diagnostics.xsl"/>
  
<!-- Folder for storing diagnostics. -->
  <property name="diagnosticsFolder" value="code/diagnostics/"/>
    
<!-- Diagnostics output file for today. -->
  <property name="diagnosticsOutput" value="${diagnosticsFolder}diagnostics_${today}.html"/>
  
<!-- Folder for HTML website output. -->
  <property name="webDir" value="${basedir}/html"/>
  
<!-- Settings to scp the resulting website content after building. -->
  <property name="remoteServerUser" value="hcmc"/>
  <property name="remoteServerLocation" value="nfs.hcmc.uvic.ca:/home1t/hcmc/www/tccd"/>
  
<!--  Some paths, libs and tasks. (May not all be needed.) -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  
<!-- We end up calling Jing with a dedicated Java task because we need to 
     pass a jvmarg to increase the default stack size, so this is not really
     needed. -->
<!--  <classloader classpath="code/utilities/jing.jar"></classloader>
  <taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask" >
    <classpath path="code/utilities/jing.jar"></classpath>
  </taskdef>-->
  
<!-- SaxonHE is in the repo. -->
<!--  <classloader classpath="${basedir}/code/utilities/saxon9he.jar"></classloader>
  <path id="saxonpath">
    <pathelement location="${basedir}/code/utilities/saxon9he.jar"/>
  </path>-->
  
<!-- We need this for Schematron validation. -->
  <taskdef name="schematron" classname="com.schematron.ant.SchematronTask">
    <classpath>
      <fileset dir="${basedir}/code/utilities" includes="*.jar"/>
    </classpath>
  </taskdef>
  
<!-- Filesets for key files. -->
<!-- All XML files in the data directory should be TEI files. -->
  <fileset id="teiFiles" dir="data" includes="**/*.xml"/>
  
  <!-- All files that are small enough to validate with Schematron. MUST FIND A WAY AROUND THIS. -->
  <fileset id="smTeiFiles" dir="data" includes="**/*.xml">
    <exclude name="**/personography.xml"/>
    <exclude name="**/placeography.xml"/>
  </fileset>
  
<!-- Portraits of individuals. -->
  <fileset id="portraits" dir="data/personography/portraits" includes="*.jpg"/>
  
<!-- Components of the map, to be copied to the website. -->
  <fileset id="mapComponents" dir="code/map">
    <include name="**/*"/>
  </fileset>
  
<!-- Utility targets. -->
  <target name="MESSAGE">
    <echo>&#x0a;${echo.separator}</echo>
    <echo>   ${msg}   </echo>
    <echo>${echo.separator}&#x0a;</echo>
  </target>
  
  <!-- Thanks to http://stackoverflow.com/users/491884/jmuc at 
       http://stackoverflow.com/questions/2974106/how-to-lookup-the-latest-git-commit-hash-from-an-ant-build-script -->
  <target name="git.revision" description="Store git revision in ${repository.version}">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
<!--    Short version...  -->
      <!--<arg value="describe"/>
      <arg value="-\-tags"/>
      <arg value="-\-always"/>-->
<!--    But we want the long version  -->
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="repository.version" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision"/>
        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
  </target>

  <target name="listFiles">
    <antcall target="MESSAGE"><param name="msg" value="Analysing paths to list key files."/></antcall>
    <exec executable="python3" failonerror="true">
      <arg value="${pythonListScript}"/>
    </exec>
  </target>
  
  <target name="createXsd">
    <antcall target="MESSAGE"><param name="msg" value="Creating XSD file for validation..."/></antcall>
    <!--  Create an XSD so someone could use SaxonEE or Xerces for validation.  -->
    <java jar="${trangJar}" fork="true">
      <arg value="${rngFile}"/>
      <arg value="${xsdFile}"/>
    </java>
  </target>
  
  <target name="validateWithJing">
    <basename property="fname" file="${filepath}"/>
    <echo message="Checking ${fname}..."/>
    <java jar="code/utilities/jing.jar" fork="true" failonerror="true">
      <arg value="${rngFile}"/>
      <arg value="${filepath}"/>
<!-- Huge thanks to George Bina for suggesting this jvmarg,
     which prevents unpredictable stack overflow errors. -->
      <jvmarg value="-Xss4m"/>
    </java>
  </target>
  
  <target name="validation">
    
    <antcall target="MESSAGE"><param name="msg" value="Validating XML files with RelaxNG..."/></antcall>

<!--  We use a dedicated task for this because we need to pass 
      a larger stack value to handle the TEI schema. -->
    <loadfile property="allTeiFiles" srcFile="${teiFileList}"/>
    <foreach
      target="validateWithJing"
      list="${allTeiFiles}"
      delimiter="${line.separator}"
      param="filepath"/>
    
<!--  This fails because the iteration through folders takes huge amounts of time.
      Using a dedicated task on each file instead. -->
    <!--<jing compactsyntax="false" rngfile="${rngFile}" failonerror="true">
      <fileset refid="teiFiles"/>
    </jing>-->
    <antcall target="schematronValidation"/>
    
  </target> 
  
  <target name="schematronValidation">
    <antcall target="MESSAGE"><param name="msg" value="Extracting Schematron to do separate validation..."/></antcall>
    <xslt in="${rngFile}" out="${schFile}"
      style="code/utilities/schematron/ExtractSchFromRNG-2.xsl">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
    </xslt>
    
    <antcall target="MESSAGE"><param name="msg" value="Validating files with extracted Schematron..."/></antcall>
    <schematron schema="${schFile}" failOnError="false" format="message"
      queryLanguageBinding="xslt2">
      
      <fileset refid="smTeiFiles"/>
      
    </schematron>
  </target>

  <target name="diagnostics">
    <antcall target="MESSAGE"><param name="msg" value="Running diagnostics..."/></antcall>
    <!--<echo message="${today}"/>-->
    <xslt force="yes" style="${diagnosticsXsl}" in="${diagnosticsXsl}" out="${diagnosticsOutput}">
      <factory name="net.sf.saxon.TransformerFactoryImpl"/>
    </xslt>
    
<!--  We do a git add in case this file is not yet tracked by git. -->
<!--    git pull first, just in case. -->
    <exec executable="git">
      <arg value="pull"/>
    </exec>
    <exec executable="git">
      <arg value="add"/>
      <arg value="${diagnosticsOutput}"/>
    </exec>
<!--  Then commit, then push. -->
    <exec executable="git">
      <arg value="commit"/>
      <arg value="${diagnosticsOutput}"/>
      <arg value="-m &quot;Adding diagnostics generated ${today}.&quot;"/>
    </exec>
    <exec executable="git">
      <arg value="push"/>
      <arg value="origin"/>
      <arg value="master"/>
    </exec>
  </target> 
  
  <target name="metadiagnostics">
    <antcall target="MESSAGE"><param name="msg" value="Running meta-diagnostics..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:metadiagnostics.xsl"/>
      <arg value="-xsl:metadiagnostics.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
    </java>
  </target>
  
  <target name="copyWebResources">
    <antcall target="MESSAGE"><param name="msg" value="Copying resources to output folder..."/></antcall>
    <mkdir dir="${webDir}/css"/>
    <copy file="code/css/html.css" todir="${webDir}/css"/>
    <mkdir dir="${webDir}/js"/>
    <copy todir="${webDir}/js">
      <fileset dir="code/js" includes="*.js"/>
    </copy>
    <mkdir dir="${webDir}/images"/>
    <copy todir="${webDir}/images">
      <fileset dir="code/images" includes="*.*"/>
    </copy>
    <mkdir dir="${webDir}/portraits"/>
    <copy todir="${webDir}/portraits">
      <fileset refid="portraits"/>
    </copy>
    <copy todir="${webDir}">
      <fileset refid="mapComponents"/>
    </copy>
  </target>
  
  <target name="createLanguageSymlinks">
    <description>
      TARGET createLanguageSymlinks
      This target creates two symlinks in the output html folder pointing
      back at the folder itself, allowing use of the document location to
      control the language content which is shown.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="Creating symbolic links to support multilingual interface..."/></antcall>
    <symlink link="${webDir}/en" resource="."/>
    <symlink link="${webDir}/fr" resource="."/>
  </target>
  
  <target name="rsyncWebsite">
    <description>
      TARGET rsyncWebsite
      This target copies the website up to a remote host for web-based testing. 
      The remote host info is configured at the top of the file; the password 
      is requested on the fly.
    </description>
    
    <antcall target="MESSAGE"><param name="msg" value="Copying the new content up to the server..."/></antcall>
    <!--<input message="Please supply the password for ${remoteServerUser} at ${remoteServerLocation}:  " addproperty="password">
      <handler classname="org.apache.tools.ant.input.SecureInputHandler" />
    </input>-->
    <!--<scp todir="${remoteServerUser}:${password}@${remoteServerLocation}">
      <fileset dir="${webDir}"/>
    </scp>-->
    <exec executable="rsync" dir="." failonerror="true">
      <arg value="-rval"/>
      <arg value="--delete"/>
      <arg value="-e ssh"/>
      <arg value="${webDir}/"/>
      <arg value="${remoteServerUser}@${remoteServerLocation}/"/>
    </exec>
  </target>
  
  <target name="website" depends="git.revision">
    <description>
      TARGET website
      This builds the HTML website from the TEI files and other resources.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="Building the HTML website..."/></antcall>
    
<!--  First remove the target.  -->
    <antcall target="MESSAGE"><param name="msg" value="Removing original content..."/></antcall>
<!--  First we delete any symlinks.  -->
    <symlink link="${webDir}/en" action="delete"/>
    <symlink link="${webDir}/fr" action="delete"/>
    <delete dir="${webDir}"/>
    <mkdir dir="${webDir}"/>

<!--  Copy web resources. -->
    <antcall target="copyWebResources"/>
    
<!--  Create AJAX fragments.  -->
    <antcall target="MESSAGE"><param name="msg" value="Creating AJAX fragments..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:tei_to_ajax_fragments_master.xsl"/>
      <arg value="-xsl:tei_to_ajax_fragments_master.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg line="outputFolder=${webDir}"/>
      <arg line="buildDate=${today}"/>
      <arg line="gitRevision=${repository.version}"/>
    </java>
    
<!-- Now create the actual HTML stuff. Saxon handles most of this.    -->
    <antcall target="MESSAGE"><param name="msg" value="Building HTML pages..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:tei_to_html_master.xsl"/>
      <arg value="-xsl:tei_to_html_master.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg line="outputFolder=${webDir}"/>
      <arg line="buildDate=${today}"/>
      <arg line="gitRevision=${repository.version}"/>
    </java>
    
    <antcall target="createLanguageSymlinks"/>
    <antcall target="listUnidentifiedNames"/>
    
    <antcall target="createAToZ"/>
  </target>
  
  <target name="listUnidentifiedNames">
    <description>
      TARGET listUnidentifiedNames
      This creates a list of links to all the unidentified names on the site.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="Creating a list of all the unidentified names..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:html_list_unidentified_names.xsl"/>
      <arg value="-xsl:html_list_unidentified_names.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg line="outputFolder=${webDir}"/>
      <arg line="buildDate=${today}"/>
      <arg line="gitRevision=${repository.version}"/>
    </java>
  </target>
  
  <target name="createAToZ">
    <description>
      TARGET createAToZ
      This creates a list of all items in the project which have ids, for reference purposes.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="Creating a list of all the project ids..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:html_project_a_to_z.xsl"/>
      <arg value="-xsl:html_project_a_to_z.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg line="outputFolder=${webDir}"/>
      <arg line="buildDate=${today}"/>
      <arg line="gitRevision=${repository.version}"/>
    </java>
  </target>
  
  <target name="ridingsToGeoJSON">
    <description>
      TARGET ridingsToGeoJSON
      This converts the place entries in the placeography into a GeoJSON file for use 
      in the website.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="GeoJSON from the places in the placeography..."/></antcall>
    <java fork="true" classname="net.sf.saxon.Transform" classpath="code/utilities/saxon9he.jar" failonerror="true" dir="code/xslt">
      <arg value="-s:${basedir}/data/placeography/placeography.xml"/>
      <arg value="-xsl:${basedir}/code/xslt/ridings_to_geojson.xsl"/> 
      <arg value="--suppressXsltNamespaceCheck:on"/>
      <arg line="-o:${basedir}/code/map/js/places.json"/>
    </java>
  </target>
  
  <target name="all">
    <description>
      TARGET all
      This runs a standard complete build, and rsyncs the results to the server. If you don't
      notice it asking for the pw, the connection may timeout and you'll have to run the 
      rsyncWebsite target again.
    </description>
    <antcall target="MESSAGE"><param name="msg" value="Running all the tasks in the build file."/></antcall>
    <antcall target="listFiles"/>
    <antcall target="validation"/>
    <antcall target="diagnostics"/>
    <antcall target="metadiagnostics"/>
    <antcall target="ridingsToGeoJSON"/>
    <antcall target="website"/>
    <antcall target="rsyncWebsite"/>
    <antcall target="MESSAGE"><param name="msg" value="DONE!"/></antcall>
  </target>
  

</project>
